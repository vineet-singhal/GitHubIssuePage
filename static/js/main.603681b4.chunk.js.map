{"version":3,"sources":["Component/FetchApi.js","App.js","reportWebVitals.js","index.js"],"names":["FetchApi","useState","user","setUser","loaded","setLoaded","pageNumber","setPageNumber","pagesVisited","displayUsers","slice","map","value","title","getIssues","a","fetch","response","json","data","items","useEffect","pageCount","Math","ceil","length","previousLabel","nextLabel","onPageChange","selected","containerClassName","previousLinkClassName","nextLinkClassName","disabledClassName","activeClassName","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAsEeA,MApEf,WAAqB,IAAD,EACMC,mBAAS,IADf,mBACXC,EADW,KACLC,EADK,OAEUF,oBAAS,GAFnB,mBAEXG,EAFW,KAEHC,EAFG,OAGeJ,mBAAS,GAHxB,mBAGXK,EAHW,KAGAC,EAHA,KAKZC,EADa,GACAF,EAGbG,EAAeP,EAAKQ,MAAMF,EAAaA,EAJ1B,IAIqDG,KAAI,SAACC,GAC3E,OAAO,6BAAKA,EAAMC,WAIdC,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MACrB,gFAFc,cACVC,EADU,gBAKGA,EAASC,OALZ,OAKVC,EALU,OAQhBhB,EAAQgB,EAAKC,OACbf,GAAU,GATM,2CAAH,qDAcfgB,qBAAU,WACRP,MACA,IACF,IAAMQ,EAAWC,KAAKC,KAAKtB,EAAKuB,OA1Bb,IA8BnB,OACE,8BAKIrB,EAQA,qCACCK,EACD,cAAC,IAAD,CACAiB,cAAe,WACfC,UAAW,OACXL,UAAWA,EACXM,aAvBW,SAAC,GAAc,IAAbC,EAAY,EAAZA,SAClBtB,EAAcsB,IAuBTC,mBAAoB,kBACpBC,sBAAuB,eACvBC,kBAAmB,WACnBC,kBAAmB,qBACnBC,gBAAiB,wBAlBjB,kDC/BOC,MARf,WACE,OACC,mCACA,cAAC,EAAD,OCKYC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.603681b4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport ReactPaginate from \"react-paginate\"\r\nfunction FetchApi() {\r\n  const [user, setUser] = useState([]);\r\n  const [loaded, setLoaded] = useState(false);\r\n  const [pageNumber,setPageNumber]=useState(0)\r\n  const usersPerPage=10;\r\n  const pagesVisited=pageNumber*usersPerPage;\r\n\r\n\r\n  const displayUsers = user.slice(pagesVisited,pagesVisited+usersPerPage).map((value) => {\r\n    return <li>{value.title}</li>;\r\n  })\r\n  \r\n\r\n  const getIssues = async () => {\r\n    const response = await fetch(\r\n      \"https://api.github.com/search/issues?q={facebook}&per_page=100&page_number=1\"\r\n    );\r\n\r\n    const data = await response.json();\r\n    \r\n\r\n    setUser(data.items);\r\n    setLoaded(true);\r\n    // console.log(data)\r\n    //   console.log(data.items)\r\n  };\r\n\r\n  useEffect(() => {\r\n    getIssues();\r\n  },[]);\r\n  const pageCount= Math.ceil(user.length/usersPerPage)\r\n  const changePage=({selected})=>{\r\n   setPageNumber(selected)\r\n  }\r\n  return (\r\n    <div>\r\n      {/* {user.items.map((value)=>{\r\n              return <li>{value.title}</li>\r\n          })} */}\r\n\r\n      {!loaded ? (\r\n        <h2>Loading .....</h2>\r\n      ) : (\r\n        // <>\r\n        //   {user.map((value) => {\r\n        //     return <li>{value.title}</li>;\r\n        //   })}\r\n        // </>\r\n        <>\r\n        {displayUsers}\r\n        <ReactPaginate\r\n        previousLabel={\"Previous\"}\r\n        nextLabel={\"Next\"}\r\n        pageCount={pageCount}\r\n        onPageChange={changePage}\r\n        containerClassName={\"paginationBttns\"}\r\n        previousLinkClassName={\"previousBttn\"}\r\n        nextLinkClassName={\"nextBttn\"}\r\n        disabledClassName={\"paginationDisabled\"}\r\n        activeClassName={\"paginationActive\"}\r\n        />\r\n        </>\r\n      )}\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FetchApi;\r\n","\r\nimport './App.css';\r\nimport \"bootstrap/dist/css/bootstrap.css\"\r\nimport FetchApi from \"./Component/FetchApi\"\r\nfunction App() {\r\n  return (\r\n   <>\r\n   <FetchApi/>\r\n   </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import slides from './data.js';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}